{% if storage %}
//! Object storage configuration

#![allow(unused_imports)]

use filigree::{
    config::parse_option,
    storage::{Storage, StorageConfig, StorageError, StoragePreset}
};
use error_stack::{Report, ResultExt};
use url::Url;

pub struct AppStorage {
{% for s in storage.buckets -%}
    pub {{s.name}}: Storage,
{%- endfor %}
{% for c in storage.configs -%}
    pub config_{{c.name}}: StorageConfig,
{%- endfor %}
}

impl AppStorage {
    pub fn new(config: AppStorageConfig) -> Result<AppStorage, Report<StorageError>> {
        Ok(AppStorage {
            {% for s in storage.buckets -%}
            {{s.name}}: Storage::new(&config.{{s.name}}.config, config.{{s.name}}.bucket)
                .attach_printable("Unable to create storage for {{s.name}}")?
                .with_public_url(config.{{s.name}}.public_url),
            {%- endfor %}
            {% for c in storage.configs -%}
            config_{{c.name}}: config.config_{{c.name}},
            {%- endfor %}
        })
    }
}

pub struct AppStorageConfigEntry {
    pub config: StorageConfig,
    pub bucket: String,
    pub public_url: Option<Url>,
}

pub struct AppStorageConfig {
    {% for s in storage.buckets -%}
    pub {{s.name}}: AppStorageConfigEntry,
    {%- endfor %}
    {% for c in storage.configs -%}
    pub config_{{c.name}}: StorageConfig,
    {%- endfor %}
}

impl AppStorageConfig {
    /// Create the application storage configuration based on the filigree configuration files
    /// and environment variables.
    pub fn new() -> Result<AppStorageConfig, StorageError> {
        {% for c in storage.configs %}
        let config_{{c.name}} = StorageConfig::from_env(
            {{c.config_struct}}{% if c.is_preset %}.into_config()?{% endif %},
            "{{env_prefix}}STORAGE_PROVIDER_{{c.name_upper}}_",
        )?;
        {% endfor %}

        {% for s in storage.buckets %}
        let mut bucket_config_{{s.name}} = config_{{s.provider_name}}.clone();
        bucket_config_{{s.name}}.merge_env("{{env_prefix}}STORAGE_{{s.name_upper}}_")?;

        let {{s.name}}_bucket = std::env::var("{{env_prefix}}STORAGE_{{s.name_upper}}_BUCKET")
            .unwrap_or_else(|_| "{{s.bucket}}".to_string());

        let {{s.name}}_public_url: Option<Url> = parse_option(std::env::var("{{env_prefix}}STORAGE_{{s.name_upper}}_PUBLIC_URL").ok())
            .map_err(|_| StorageError::Configuration("Invalid URL in {{env_prefix}}STORAGE_{{s.name_upper}}_PUBLIC_URL"))?
            {% if s.public_url %}
            .or(Some(Url::parse("{{s.public_url}}").expect("URL from template was invalid")))
            {%- endif %};

        {% endfor %}

        Ok(AppStorageConfig {
            {% for s in storage.buckets -%}
            {{s.name}}: AppStorageConfigEntry {
                config: bucket_config_{{s.name}},
                bucket: {{s.name}}_bucket,
                public_url: {{s.name}}_public_url,
            },
            {%- endfor %}
            {% for c in storage.configs -%}
            config_{{c.name}},
            {%- endfor %}
        })
    }

    /// A test configuration that forces all storage providers to be in-memory.
    pub fn new_in_memory() -> AppStorageConfig {
        AppStorageConfig {
            {% for s in storage.buckets -%}
            {{s.name}}: AppStorageConfigEntry {
                config: StorageConfig::Memory,
                bucket: "{{s.bucket}}".to_string(),
                public_url: {% if s.public_url -%}
                    Some(Url::parse("{{s.public_url}}").expect("URL from template was invalid"))
                {%- else -%}
                    None
                {%- endif -%},
            },
            {%- endfor %}
            {% for s in storage.configs -%}
            config_{{s.name}}: StorageConfig::Memory,
            {%- endfor %}
        }
    }
}

{% endif %}
