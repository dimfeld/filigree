#![allow(unused_imports)]
use axum::{
    extract::{Path, Query, State},
    http::StatusCode,
    response::IntoResponse,
    routing,
};
use filigree::extract::FormOrJson;
use maud::{html, Markup};
use schemars::JsonSchema;

use crate::{
    auth::{has_any_permission, Authed},
    pages::layout::root_layout_page,
    server::ServerState,
    Error,
};

{% for s in submodules %}
pub mod {{s}};
{% endfor %}

{% for action in actions %}

{{action.input_type_def}}

{{action.query_type_def}}

async fn {{action.name}}_action(
    {{action.args}}
) -> Result<impl IntoResponse, Error> {
    let body = html! {};

    Ok(body)
}

{% endfor %}

{% if form %}
{{form.input_type_def}}

async fn {{name}}_form(
{{form.args}}
) -> Result<impl IntoResponse, Error> {
    let body = html! {};

    Ok(body)
}
{% endif %}

{{query_type_def}}

async fn {{name}}_page(
    {{args}}
) -> Result<impl IntoResponse, Error> {
    let body = html!{};

    Ok(root_layout_page(auth.as_ref(), "title", body))
}

pub fn create_routes() -> axum::Router<ServerState> {
    axum::Router::new()
        .route("{{path}}", routing::get({{name}}_page)
            {% if permission %}
            .route_layer(has_any_permission(vec!["{{permission}}", "org_admin"]))
            {% endif %}
            )
        {% if form %}
        .route("{{path}}", routing::post({{name}}_form)
            {% if form.permission %}
            .route_layer(has_any_permission(vec!["{{form.permission}}", "org_admin"]))
            {% endif %}

            )
        {% endif %}
        {% for a in actions %}
        .route("{{a.path}}", routing::{{a.method}}({{a.name}}_action)
            {% if a.permission %}
            .route_layer(has_any_permission(vec!["{{a.permission}}", "org_admin"]))
            {% endif %}
            )
        {% endfor %}
        {% for s in submodules %}
        .merge({{s}}::create_routes())
        {% endfor %}

}
