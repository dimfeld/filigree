#![allow(unused_imports)]
use axum::{
    extract::{Path, State},
    http::StatusCode,
    response::IntoResponse,
    routing,
};
use filigree::{
    extract::ValidatedForm,
};
use maud::html;
use schemars::JsonSchema;

use crate::{
    auth::{has_any_permission, Authed},
    pages::error::HtmlError,
    server::ServerState,
    Error,
};

mod auth;
mod error;
mod forgot;
mod generic_error;
pub mod layout;
mod login;
mod logout;
pub mod not_found;
mod reset;
{% for m in submodules -%}
mod {{m}};
{% endfor %}

use layout::*;
pub use not_found::*;
pub use generic_error::*;

{% if has_handler %}
{% include "root/pages/_page_handlers.rs.tera" %}
{% else %}
async fn home_page(
    authed: Option<Authed>
) -> Result<impl IntoResponse, HtmlError> {
    let body = html!{};

    Ok(root_layout_page(auth.as_ref(), "title", body))
}
{% endif %}

pub fn create_routes() -> axum::Router<ServerState> {
    axum::Router::new()
        {% include "root/pages/_page_routes.rs.tera" %}
        .merge(login::create_routes())
        .merge(logout::create_routes())
        .merge(forgot::create_routes())
        .merge(reset::create_routes())
        {% for m in submodules -%}
        .merge({{m}}::create_routes())
        {% endfor %}
}
