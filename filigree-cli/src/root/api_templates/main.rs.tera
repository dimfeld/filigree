use clap::{Args, Parser, Subcommand};
use error_stack::{Report, ResultExt};
use filigree::{
    auth::{CorsSetting, SameSiteArg, SessionCookieBuilder},
    tracing_config::{configure_tracing, teardown_tracing, TracingExportConfig}
};
use tracing::{event, Level};

use {{crate_name}}::{Error, db, emails, server, util_cmd};


#[derive(Parser)]
#[command(version, about)]
struct Cli {
    #[clap(subcommand)]
    command: Command,
}

#[derive(Debug, Subcommand)]
enum Command {
    Util(util_cmd::UtilCommand),
    Db(db::DbCommand),
    Serve(ServeCommand),
}

#[derive(Args, Debug)]
struct ServeCommand {
    /// The PostgreSQL database to connect to
    #[clap(long = "db", env = "{{env_prefix}}DATABASE_URL")]
    database_url: String,

    /// The IP host to bind to
    #[clap(long, env = "{{env_prefix}}HOST", default_value_t = String::from("127.0.0.1"))]
    host: String,

    /// The TCP port to listen on
    #[clap(long, env = "{{env_prefix}}PORT", default_value_t = {{server.default_port}})]
    port: u16,

    /// The environment in which this server is running
    #[clap(long = "env", env = "{{env_prefix}}ENV", default_value_t = String::from("development"))]
    env: String,

    /// Request timeout, in seconds
    #[clap(long, env = "{{env_prefix}}REQUEST_TIMEOUT", default_value_t = 60)]
    request_timeout: u64,

    #[clap(long, env = "{{env_prefix}}COOKIE_SAME_SITE", value_enum, default_value_t = SameSiteArg::Strict)]
    cookie_same_site: SameSiteArg,

    /// Set if the site is being accessed over HTTP
    #[clap(long, env = "{{env_prefix}}INSECURE")]
    insecure: bool,

    /// Session expiry time, in days
    #[clap(long, env = "{{env_prefix}}SESSION_EXPIRY", default_value_t = 14)]
    session_expiry: u64,

    /// Maintain at least this many connections to the database.
    #[clap(long, env="{{env_prefix}}DB_MIN_CONNECTIONS", default_value_t = {{db.min_connections}})]
    db_min_connections: u32,

    /// Create no more than this many connections to the database.
    #[clap(long, env="{{env_prefix}}DB_MAX_CONNECTIONS", default_value_t = {{db.max_connections}})]
    db_max_connections: u32,
    /// The email service to use
    #[clap(env="{{env_prefix}}EMAIL_SENDER_SERVICE", default_value_t = String::from("{{email.provider}}"))]
    email_sender_service: String,

    /// The API token for the email sending service
    #[clap(env="{{env_prefix}}EMAIL_SENDER_API_TOKEN"
        {%- if email.provider == "none" -%}
        , default_value_t = String::from("")
        {%- endif -%}
        )]
    email_sender_api_token: String,

    /// The email address to use as the default sender
    #[clap(env="{{env_prefix}}EMAIL_DEFAULT_FROM_ADDRESS", default_value_t = String::from("{{email.from}}"))]
    email_default_from_address: String,

    /// Allow users to sign up themselves
    #[clap(env="{{env_prefix}}ALLOW_PUBLIC_SIGNUP", default_value_t = {{users.allow_public_signup}})]
    allow_public_signup: bool,

    /// Allow users to invite people to their team
    #[clap(env="{{env_prefix}}ALLOW_INVITE_TO_SAME_ORG", default_value_t = {{users.allow_invite_to_same_org}})]
    allow_invite_to_same_org: bool,

    /// Allow users to invite people to the app, in their own new team
    #[clap(env="{{env_prefix}}ALLOW_INVITE_TO_NEW_ORG", default_value_t = {{users.allow_invite_to_new_org}})]
    allow_invite_to_new_org: bool,

    /// Require email verification when inviting a user to the same org
    #[clap(env="{{env_prefix}}SAME_ORG_INVITES_REQUIRE_EMAIL_VERIFICATION", default_value_t = {{users.same_org_invites_require_email_verification}})]
    same_org_invites_require_email_verification: bool,

    /// The hosts that this server can be reached from
    #[clap(env="{{env_prefix}}HOSTS")]
    hosts: Option<Vec<String>>,

    /// CORS configuration
    #[clap(env="{{env_prefix}}API_CORS", value_enum, default_value_t = CorsSetting::{{server.api_cors}})]
    api_cors: CorsSetting,

    /// The base URL for OAuth redirect URLs. If omitted, `hosts[0]` is used.
    #[clap(env="{{env_prefix}}OAUTH_REDIRECT_URL_BASE")]
    oauth_redirect_host: Option<String>,

    // tracing endpoint (if any)
    // honeycomb team
    // honeycomb dataset
    // jaeger service name
    // jaeger endpoint
}



async fn serve(cmd: ServeCommand) -> Result<(), Report<Error>> {
    error_stack::Report::set_color_mode(error_stack::fmt::ColorMode::None);

    // TODO make this configurable
    configure_tracing(
            "{{env_prefix}}",
            TracingExportConfig::None,
            tracing_subscriber::fmt::time::ChronoUtc::rfc_3339(),
            std::io::stdout
        )
        .change_context(Error::ServerStart)?;

    let pool_options = sqlx::postgres::PgPoolOptions::new()
        .min_connections(cmd.db_min_connections)
        .max_connections(cmd.db_max_connections);

    let pg_pool = if cmd.db_min_connections > 0 {
        pool_options.connect(&cmd.database_url).await
    } else {
        pool_options.connect_lazy(&cmd.database_url)
    };

    let pg_pool = pg_pool.change_context(Error::Db)?;

    {% if db.migrate_on_start %}
    db::run_migrations(&pg_pool).await?;
    {% endif %}

    let secure_cookies = !cmd.insecure;

    let email_service = filigree::email::services::email_service_from_name(
        &cmd.email_sender_service,
        cmd.email_sender_api_token,
    );
    let email_sender = filigree::email::services::EmailSender::new(
        cmd.email_default_from_address,
        emails::create_tera(),
        email_service,
    );

    let hosts = cmd.hosts.unwrap_or_else(|| vec![{{server_hosts}}]);

    let oauth_redirect_host = cmd.oauth_redirect_host.unwrap_or_else(|| {
        format!(
            "{}://{}",
            if cmd.insecure { "http" } else { "https" },
            if hosts.is_empty() {
              format!("localhost:{}", cmd.port)
            } else {
              hosts[0].clone()
            }
        )
    });

    let server = server::create_server(server::Config {
        env: cmd.env,
        host: cmd.host,
        port: cmd.port,
        insecure: cmd.insecure,
        request_timeout: std::time::Duration::from_secs(cmd.request_timeout),
        cookie_configuration: SessionCookieBuilder::new(secure_cookies, cmd.cookie_same_site),
        session_expiry: filigree::auth::ExpiryStyle::AfterIdle(
            std::time::Duration::from_secs(cmd.session_expiry * 24 * 60 * 60),
        ),
        email_sender,
        hosts,
        api_cors: cmd.api_cors,
        // This will build OAuth providers based on the environment variables present.
        oauth_providers: None,
        oauth_redirect_url_base: oauth_redirect_host,
        new_user_flags: filigree::server::NewUserFlags{
            allow_public_signup: cmd.allow_public_signup,
            allow_invite_to_same_org: cmd.allow_invite_to_same_org,
            allow_invite_to_new_org: cmd.allow_invite_to_new_org,
            same_org_invites_require_email_verification: cmd.same_org_invites_require_email_verification,
        },
        pg_pool,
    })
    .await?;

    server.run().await?;

    event!(Level::INFO, "Exporting remaining traces");
    teardown_tracing()
        .await
        .change_context(Error::Shutdown)?;
    event!(Level::INFO, "Trace shut down complete");

    Ok(())
}

#[tokio::main(flavor = "multi_thread")]
pub async fn main() -> Result<(), Report<Error>> {
    {% if server.dotenv -%}
    dotenvy::dotenv().ok();
    {%- endif %}
    let cli = Cli::parse();

    match cli.command {
        Command::Db(cmd) => cmd.handle().await?,
        Command::Serve(cmd) => serve(cmd).await?,
        Command::Util(cmd) => cmd.handle().await?,
    }

    Ok(())
}
