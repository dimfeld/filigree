{% if storage %}
//! Object storage configuration
use filigree::storage::{Storage, StorageConfig, StorageError};
use error_stack::{Report, ResultExt};

pub struct AppStorage {
{% for s in storage.buckets %}
    pub {{s.name}}: Storage,
{% endfor %}
{% for c in storage.configs %}
    pub config_{{c.name}}: StorageConfig,
{% endfor %}
}

impl AppStorage {
    pub fn new(config: AppStorageConfig) -> Result<AppStorage, Report<StorageError>> {
        Ok(AppStorage {
            {% for s in storage.buckets %}
            {{s.name}}: Storage::new(&config.{{s.name}}.config, &config.{{s.name}}.bucket)
                .attach_printable("Unable to create storage for {{s.name}}")?,
            {% endfor %}
            {% for c in storage.configs %}
            config_{{c.name}}: config.config_{{c.name}},
            {% endfor %}
        })
    }
}

pub struct AppStorageConfigEntry {
    pub config: StorageConfig,
    pub bucket: String,
}

pub struct AppStorageConfig {
    {% for s in storage.buckets %}
    pub {{s.name}}: AppStorageConfigEntry,
    {% endfor %}
    {% for c in storage.configs %}
    pub config_{{c.name}}: StorageConfig,
    {% endfor %}
}

impl AppStorageConfig {
    /// Create the application storage configuration based on the filigree configuration files
    /// and environment variables.
    pub fn new() -> Result<AppStorageConfig, StorageError> {
        {% for c in storage.configs %}
        let mut config_{{c.name}} = StorageConfig::from_env(
            {{c.config_struct}}{% if c.is_preset %}.into_config(){% endif %},
            "{{env_prefix}}STORAGE_PROVIDER_{{c.name_upper}}_",
        )?;
        {% endfor %}

        {% for s in storage.buckets %}
        let mut bucket_config_{{s.name}} = config_{{s.provider_name}}.clone();
        bucket_config_{{s.name}}.merge_env("{{env_prefix}}STORAGE_{{s.name_upper}}")?;

        let {{s.name}}_bucket = prefixed_env_var("{{env_prefix}}STORAGE_{{s.name_upper}}_BUCKET")
            .unwrap_or_else(|| "{{s.bucket}}".to_string());
        {% endfor %}

        Ok(AppStorageConfig {
            {% for s in storage.buckets -%}
            {{s.name}}: AppStorageConfigEntry {
                config: bucket_config_{{s.name}},
                bucket: {{s.name}}_bucket,
            },
            {%- endfor %}
            {% for c in storage.configs -%}
            config_{{c.name}},
            {%- endfor %}
        })
    }

    /// A test configuration that forces all storage providers to be in-memory.
    pub fn new_in_memory(config: &Config) -> AppStorageConfig {
        AppStorageConfig {
            {% for s in storage.buckets -%}
            {{s.name}}: AppStorageConfigEntry {
                config: StorageConfig::Memory,
                bucket: "{{s.bucket}}".to_string(),
            },
            {%- endfor %}
            {% for s in storage.configs -%}
            config_{{c.name}}: StorageConfig::Memory,
            {%- endfor %}
        }
    }
}

{% endif %}
