use filigree::email::templates::{render_template_pair, EmailContent, EmailTemplate, TeraError};
use serde::Serialize;
use uuid::Uuid;

#[derive(Debug, Serialize)]
pub struct PasswordlessLoginRequestTemplate {
    pub user_name: Option<String>,
    pub url_scheme: &'static str,
    pub host: String,
    pub email: String,
    pub token: Uuid,
    pub redirect_to: Option<String>,
}

impl EmailTemplate for PasswordlessLoginRequestTemplate {
    fn subject(&self) -> String {
        "Log in to {{product_name}}".to_string()
    }

    fn render(&self, renderer: &tera::Tera) -> Result<EmailContent, TeraError> {
        render_template_pair(
            renderer,
            self,
            "passwordless_login.html",
            "passwordless_login.txt",
        )
    }

    fn tags(&self) -> Vec<String> {
        vec!["passwordless_login".to_string()]
    }
}
