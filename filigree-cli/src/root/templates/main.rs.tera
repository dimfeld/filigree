use clap::{Args, Parser, Subcommand};
use error_stack::{Report, ResultExt};
use filigree::{
    auth::{SameSiteArg, SessionCookieBuilder},
    tracing_config::{configure_tracing, teardown_tracing, TracingExportConfig}
};
use tracing::{event, Level};

use {{crate_name}}::{Error, db, server, util_cmd};


#[derive(Parser)]
#[command(version, about)]
struct Cli {
    #[clap(subcommand)]
    command: Command,
}

#[derive(Debug, Subcommand)]
enum Command {
    Util(util_cmd::UtilCommand),
    Db(db::DbCommand),
    Serve(ServeCommand),
}

#[derive(Args, Debug)]
struct ServeCommand {
    /// The PostgreSQL database to connect to
    #[clap(long = "db", env = "{{env_prefix}}DATABASE_URL")]
    database_url: String,

    /// The IP host to bind to
    #[clap(long, env = "{{env_prefix}}HOST", default_value_t = String::from("127.0.0.1"))]
    host: String,

    /// The TCP port to listen on
    #[clap(long, env = "{{env_prefix}}PORT", default_value_t = {{default_port}})]
    port: u16,

    /// The environment in which this server is running
    #[clap(long = "env", env = "{{env_prefix}}ENV", default_value_t = String::from("development"))]
    env: String,

    /// Request timeout, in seconds
    #[clap(long, env = "{{env_prefix}}REQUEST_TIMEOUT", default_value_t = 60)]
    request_timeout: u64,

    #[clap(long, env = "{{env_prefix}}COOKIE_SAME_SITE", value_enum, default_value_t = SameSiteArg::Strict)]
    cookie_same_site: SameSiteArg,

    #[clap(long, env = "{{env_prefix}}COOKIE_INSECURE")]
    cookie_insecure: bool,

    /// Session expiry time, in days
    #[clap(long, env = "{{env_prefix}}SESSION_EXPIRY", default_value_t = 7)]
    session_expiry: u64,

    #[clap(long, env="{{env_prefix}}DB_MIN_CONNECTIONS", default_value_t = {{db.min_connections}})]
    db_min_connections: u32,

    #[clap(long, env="{{env_prefix}}DB_MAX_CONNECTIONS", default_value_t = {{db.max_connections}})]
    db_max_connections: u32,

    // tracing endpoint (if any)
    // honeycomb team
    // honeycomb dataset
    // jaeger service name
    // jaeger endpoint
}


async fn serve(cmd: ServeCommand) -> Result<(), Report<Error>> {

    // TODO make this configurable
    configure_tracing(
            "{{env_prefix}}",
            TracingExportConfig::None,
            tracing_subscriber::fmt::time::ChronoUtc::rfc_3339(),
            std::io::stdout
        )
        .change_context(Error::ServerStart)?;

    let pool_options = sqlx::postgres::PgPoolOptions::new()
        .min_connections(cmd.db_min_connections)
        .max_connections(cmd.db_max_connections);

    let pg_pool = if cmd.db_min_connections > 0 {
        pool_options.connect(&cmd.database_url).await
    } else {
        pool_options.connect_lazy(&cmd.database_url)
    };

    let pg_pool = pg_pool.change_context(Error::Db)?;

    {% if db.migrate_on_start %}
    db::run_migrations(&pg_pool).await?;
    {% endif %}

    let secure_cookies = !cmd.cookie_insecure;

    let server = server::create_server(server::Config {
        env: cmd.env,
        host: cmd.host,
        port: cmd.port,
        request_timeout: std::time::Duration::from_secs(cmd.request_timeout),
        cookie_configuration: SessionCookieBuilder::new(secure_cookies, cmd.cookie_same_site),
        session_expiry: filigree::auth::ExpiryStyle::AfterIdle(
            std::time::Duration::from_secs(cmd.session_expiry * 24 * 60 * 60),
        ),
        pg_pool,
    })
    .await?;

    server.run().await?;

    event!(Level::INFO, "Exporting remaining traces");
    teardown_tracing()
        .await
        .change_context(Error::Shutdown)?;
    event!(Level::INFO, "Trace shut down complete");

    Ok(())
}

#[tokio::main(flavor = "multi_thread")]
pub async fn main() -> Result<(), Report<Error>> {
    {% if load_dotenv -%}
    dotenvy::dotenv().ok();
    {%- endif %}
    let cli = Cli::parse();

    match cli.command {
        Command::Db(cmd) => cmd.handle().await?,
        Command::Serve(cmd) => serve(cmd).await?,
        Command::Util(cmd) => cmd.handle().await?,
    }

    Ok(())
}
