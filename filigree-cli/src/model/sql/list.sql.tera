{% import "model/sql_macros.tera" as macros %}

{# See if any field is filterable #}
{% set has_filterable = false %}
{% for field in fields %}
  {% if field.filterable != 'none' %}
    {% set_global has_filterable = true %}
  {% endif %}
{% endfor %}

SELECT
  {{ fields
    | filter(attribute='never_read', value=false)
    | filter(attribute='omit_in_list', value=false)
    | map(attribute='sql_name')
    | join(sep=',') }}

  {% if populate_children %}
    {% for c in children %}
      {% if c.relationship.populate_on_list == 'id' %}
        , (
          SELECT
            {% if c.relationship.many %}COALESCE(ARRAY_AGG({%- endif -%}
              {{c.table}}.id
            {% if c.relationship.many %}), ARRAY[]::uuid[]){% endif %}
          FROM {{c.schema}}.{{c.table}}
          WHERE {{c.parent_field}} = tb.id {% if not global %}AND organization_id=$1{% endif %}
          {% if not c.relationship.many %}LIMIT 1{% endif %}
        ) AS "{{c.list_sql_field_name}}"
      {% elif c.relationship.populate_on_list == 'data' %}
        , (
          SELECT
            {% if c.relationship.many -%}COALESCE(ARRAY_AGG({%- endif -%}
              JSONB_BUILD_OBJECT(
                {% for field in c.fields %}
                  '{{field.rust_name}}', {{field.sql_name}}{% if not loop.last %},{% endif %}
                {% endfor %}
              )
            {%- if c.relationship.many -%}), ARRAY[]::jsonb[]){%- endif %}
          FROM {{c.schema}}.{c.table}}
          WHERE {{c.parent_field}} = tb.id {% if not global %} AND organization_id=$1{% endif %}
          {% if not c.relationship.many %}LIMIT 1{% endif %}
        ) AS "{{c.list_sql_field_name}}"
      {% endif %}
    {% endfor %}

    {% for r in reference_populations | filter(attribute="on_list", value=true) %}
    , (SELECT
      JSONB_BUILD_OBJECT(
        {% for field in r.fields %}
        '{{field.rust_name}}', ref_{{r.name}}.{{field.sql_name}}{% if not loop.last %},{% endif %}
        {% endfor %}
      )
      FROM {{ r.table}} ref_{{r.name}}
      WHERE tb.{{r_id_field}} IS NOT NULL
        AND ref_{{r.name}}.id = tb.{{r.id_field}}
        AND ref_{{r.name}}.organization_id = tb.organization_id
    ) AS "{{r.full_name}}"
    {% endfor %}
  {% endif %}
FROM
  {{schema}}.{{ table }} tb
{% if auth_check_in_query %}
JOIN LATERAL (
  {{ macros::permissions_value(
      auth_schema=auth_schema,
      auth_scope=auth_scope,
      organization="$1",
      actor_ids="$2",
      object_id="tb.id",
      owner_perm=owner_permission,
      read_perm=read_permission,
      write_perm=write_permission
  )}}
) perm ON perm._permission IS NOT NULL
{% endif %}
WHERE
{% if not global %}
   organization_id = $1
{% endif %}
{% if has_filterable %}
  AND __insertion_point_filters
{% endif %}

ORDER BY __insertion_point_order_by
{% if not pagination.disable %}
LIMIT $3
OFFSET $4
{% endif %}

