import { client, type ModelDefinition } from 'filigree-web';
import { z } from 'zod';
import { ObjectPermission } from '../model_types.js';
{{ts_imports}}

export type {{id_type}} = string;

{% for struct in structs %}
export const {{struct.name}}Schema = z.object({
  {{struct.zod_fields_content}}
});

export type {{struct.name}} = z.infer<typeof {{struct.name}}Schema>;
{% for alias in struct.aliases -%}
export const {{alias}}Schema = {{struct.name}}Schema;
export type {{alias}} = {{struct.name}};
{% endfor %}

{%- endfor %}

export const baseUrl = '{{url_path}}';
export const urlWithId = (id: string) => `${baseUrl}/${id}`

export const urls = {
  create: baseUrl,
  list: baseUrl,
  get: urlWithId,
  update: urlWithId,
  delete: urlWithId,
};

export const {{name}}Model : ModelDefinition<typeof {{struct_base}}Schema> = {
  name: "{{name}}",
  plural: "{{plural}}",
  baseUrl,
  urls,
  schema: {{struct_base}}Schema,
  createSchema: {{struct_base}}CreatePayloadSchema,
  updateSchema: {{struct_base}}UpdatePayloadSchema,
  fields: [
    {% for field in fields -%}
    {
      name: "{{field.name}}",
      type: "{{field.client_type}}",
      label: "{{field.label}}",
      {% if field.description -%}
      description: "{{field.description}}",
      {%- endif -%}
      constraints: {
        required: {{not field.nullable}}
      },
    },
    {%- endfor %}
  ],
};

{% for e in custom_endpoints %}
export interface {{e.pascal_name}}Args {
  {{e.ts.args_struct}},
  fetch?: typeof fetch,
}

{{e.ts.input_type_def}}

{{e.ts.output_type_def}}

{{e.ts.query_type_def}}

export async function {{e.name}}({ fetch, {{e.ts.args}} }: {{e.pascal_name}}Args) {
  return client({
    url: `{{e.ts.path}}`,
    method: '{{e.ts.method}}',
    fetch,
    {% if e.query_type -%}
    query: query,
    {%- endif %}
    {% if e.has_payload -%}
    json: payload,
    {%- endif %}
  }).json<{{e.output_type}}>();
}
{% endfor %}
