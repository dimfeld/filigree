#![allow(unused_imports, dead_code)]
use super::{{id_type}};
{%- if id_type != "OrganizationId" %}
use crate::models::organization::OrganizationId;
{% endif -%}
{{rust_imports}}
use filigree::auth::ObjectPermission;
use sea_orm::prelude::*;
use serde::{
    ser::{Serializer, SerializeStruct},
    Serialize, Deserialize
};
use sqlx_transparent_json_decode::sqlx_json_decode;

{% for struct in structs %}

#[derive(Serialize, Deserialize, Debug, Clone, schemars::JsonSchema, sqlx::FromRow)]
{% if struct.name != struct_base and not struct.impl_serialize -%}
#[cfg_attr(test, derive(Serialize))]
{%- endif %}
{%- if struct.is_primary_model -%}
#[derive(sea_orm::DeriveEntityModel)]
#[sea_orm(table_name = "{{table}}" {% if schema %}, schema_name = "{{schema}}" {% endif %})]
{% else %}
{%- if struct.impl_into_active_model %}#[derive(sea_orm::DeriveIntoActiveModel)]{% endif %}
#[derive(sea_orm::FromQueryResult)]
{%- endif %}
pub struct {{ struct.name }} {
    {%- if struct.is_primary_model -%}#[sea_orm(primary_key)]{% endif %}
    {{ struct.rust_fields_content }}
}

{% for alias in struct.aliases %}
    pub type {{ alias }} = {{ struct.name }};
{% endfor %}

impl {{struct.name}} {
    // The <T as Default> syntax here is weird but lets us generate from the template without needing to
    // detect whether to add the extra :: in cases like DateTime::<Utc>::default
    {% for field in struct.fields %}
        pub fn default_{{field.rust_name}}() -> {{field.rust_type}} {
            {% if field.default_rust %}
                {% if field.nullable %}
                    Some({{field.default_rust}}.into())
                {% else %}
                    {{field.default_rust}}.into()
                {% endif %}
            {% else %}
                {% if field.nullable %}
                    None
                {% else %}
                    <{{field.rust_type}} as Default>::default().into()
                {% endif %}
            {% endif %}
        }
    {% endfor %}
}

{% if struct.impl_json_decode %}
sqlx_json_decode!({{struct.name}});
{% endif %}

impl Default for {{struct.name}} {
    fn default() -> Self {
        Self {
            {% for field in struct.fields -%}
            {{field.rust_name}}: Self::default_{{field.rust_name}}(),
            {%- endfor %}
        }
    }
}

{% endfor %}

#[derive(Copy, Clone, Debug, sea_orm::EnumIter, sea_orm::DeriveRelation)]
pub enum Relation {
    {# TODO add relations here #}
}

impl sea_orm::ActiveModelBehavior for ActiveModel {}
