{% if id_type == "UserId" %}
use super::UserId;
{% else %}
use super::super::{{id_type}};
{% endif %}
{%- if id_type != "OrganizationId" %}
use crate::models::organization::OrganizationId;
{% endif -%}
use filigree::auth::ObjectPermission;
use serde::{
    ser::{Serializer, SerializeStruct},
    Serialize, Deserialize
};

{% for struct in structs %}

#[derive(Deserialize, Debug, Clone, sqlx::FromRow)]
pub struct {{ struct.name }} {
    {{ struct.fields }}
}

{% for alias in struct.aliases %}
    pub type {{ alias }} = {{ struct.name }};
{% endfor %}

{% endfor %}

impl Serialize for {{struct_base}} {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        if self._permission == ObjectPermission::Owner {
            {% set view_fields = fields | filter(attribute="owner_read", value=true) %}
            let mut state = serializer.serialize_struct("{{struct_base}}", {{ view_fields | length + 1 }})?;
            {% for field in view_fields -%}
            state.serialize_field("{{field.name}}", &self.{{field.rust_name}})?;
            {%- endfor %}
            state.serialize_field("_permission", &self._permission)?;
            state.end()
        } else {
            {% set view_fields = fields | filter(attribute="user_read", value=true) %}
            let mut state = serializer.serialize_struct("{{struct_base}}", {{ view_fields | length + 1 }})?;
            {% for field in view_fields -%}
            state.serialize_field("{{field.name}}", &self.{{field.rust_name}})?;
            {%- endfor %}
            state.serialize_field("_permission", &self._permission)?;
            state.end()
        }
    }
}
