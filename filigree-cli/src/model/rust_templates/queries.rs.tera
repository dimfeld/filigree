#![allow(unused_imports, unused_variables, dead_code)]
use error_stack::ResultExt;
use filigree::{
    auth::ObjectPermission,
    errors::OrderByError,
    sql::{BindingOperator, FilterBuilder, ValuesBuilder}
};
use sea_orm::prelude::*;
use serde::Deserialize;
use sqlx::{PgConnection, PgExecutor, postgres::PgRow, query_file, query_file_as, query_file_scalar};
use tracing::{event, instrument, Level};

use std::str::FromStr;

use super::{{id_type}};
use super::types::*;
{% if model_name != "Organization" %}
use crate::models::organization::OrganizationId;
{% endif %}
use crate::auth::AuthInfo;
use crate::Error;
{{rust_imports}}

{% macro id_ref(id="id") -%}
{{id}}
{%- if id_is_string -%}
    .as_str()
{%- else -%}
    .as_uuid()
{%- endif -%}
{%- endmacro %}

{% macro db_org_id(base="auth.organization_id") -%}
{{base}}
{%- if auth.string_ids -%}
.as_str()
{%- else -%}
.as_uuid()
{%- endif -%}
{% endmacro input %}

type QueryAs<'q, T> = sqlx::query::QueryAs<'q, sqlx::Postgres, T, <sqlx::Postgres as sqlx::database::HasArguments<'q>>::Arguments>;

{% if belongs_to_field %}
fn check_missing_parent_error<T>(result: Result<T, sqlx::Error>) -> Result<T, error_stack::Report<Error>> {
    match result {
        Err(sqlx::Error::Database(e))
            if e.constraint() == Some("{{table}}_{{belongs_to_field.sql_name}}_fkey") =>
        {
            Err(e).change_context(Error::NotFound("Parent {{parent_model_name}}"))
        }
        _ => result.change_context(Error::Db)
    }
}
{% endif %}

/// Get a {{model_name}} from the database or return a `NotFound` error.
#[instrument(skip(db))]
pub async fn get(db: impl ConnectionTrait, auth: &AuthInfo, id: {{id_type}}) -> Result<Model, error_stack::Report<Error>> {
    let object = super::Entity::new(auth)
        .find_by_id(id)?
        .one(&db)
        .await
        .change_context(Error::Db)?
        .ok_or(Error::NotFound(super::NAME))?;

    Ok(object)
}
/*

{% if can_populate_get %}
/// Get a populated {{model_name}} from the database
#[instrument(skip(db))]
pub async fn get_populated(db: impl ConnectionTrait, auth: &AuthInfo, id: &{{id_type}}) -> Result<{{ struct_base }}PopulatedGetResult, error_stack::Report<Error>> {
    let actor_ids = auth.actor_ids();
    let object = query_file_as!({{struct_base}}PopulatedGetResult, "{{dir}}/select_one_populated.sql",
        {{self::id_ref()}},
        {{self::db_org_id()}},
        &actor_ids
        )
        .fetch_optional(db)
        .await
        .change_context(Error::Db)?
        .ok_or(Error::NotFound("{{model_name}}"))?;

    Ok(object)
}
{% endif %}

#[derive(Debug, Default)]
enum OrderByField {
    {%- for field in fields  %}
    {%- if field.sortable != "none" -%}
        {% if field.snake_case_name == default_sort_field -%}
        #[default]
        {%- endif %}
    {{field.pascal_case_name}},
    {%- endif -%}
    {%- endfor -%}
}

impl OrderByField {
    fn as_str(&self) -> &str {
        match self {
            {% for field in fields -%}
            {%- if field.sortable != "none" -%}
            Self::{{field.pascal_case_name}} => "{{field.snake_case_name}}",
            {%- endif -%}
            {%- endfor %}
        }
    }

    fn allowed_direction(&self, descending: bool) -> bool {
        match self {
            {% for field in fields | filter(attribute="sortable", value="ascending_only") -%}
            Self::{{field.pascal_case_name}} => descending == false,
            {%- endfor %}
            {% for field in fields | filter(attribute="sortable", value="descending_only") -%}
            Self::{{field.pascal_case_name}} => descending == true,
            {%- endfor %}
            _ => true
        }
    }
}

impl std::str::FromStr for OrderByField {
    type Err = OrderByError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let value = match s {
            {% for field in fields -%}
            {%- if field.sortable != "none" -%}
            "{{field.sql_name}}" => OrderByField::{{field.pascal_case_name}},
            {%- endif -%}
            {%- endfor %}
            _ => return Err(OrderByError::InvalidField),
        };

        Ok(value)
    }
}

fn parse_order_by(field: &str) -> Result<(bool, OrderByField), OrderByError> {
    let descending = field.starts_with('-');
    let field = if descending {
        &field[1..]
    } else {
        field
    };

    let value = OrderByField::from_str(field)?;
    if !value.allowed_direction(descending) {
        return Err(OrderByError::InvalidDirection);
    }
    Ok((descending, value))
}

{% set_global has_filterable = false %}

#[derive(Deserialize, Debug, Default)]
pub struct ListQueryFilters {
    {%if not pagination.disable %}
    pub page: Option<u32>,
    pub per_page: Option<u32>,
    {% endif %}
    pub order_by: Option<String>,

    {%- for field in fields | filter(attribute="filterable", value="exact") -%}
        {% set_global has_filterable = true %}
    #[serde(default)]
    pub {{field.rust_name}}: {% if field.base_rust_type == "bool" %}Option{% else %}Vec{% endif %}<{{field.base_rust_type}}>,
    {%- endfor -%}
    {%- for field in fields | filter(attribute="filterable", value="range") -%}
        {% set_global has_filterable = true %}
    pub {{field.rust_name}}_lte: Option<{{field.base_rust_type}}>,
    pub {{field.rust_name}}_gte: Option<{{field.base_rust_type}}>,
    {%- endfor -%}
}

impl ListQueryFilters {
    fn build_where_clause(&self) -> String {
        {% set start_binding = 3 %}
        {% if not pagination.disable %}
          {% set start_binding = start_binding + 2 %}
        {% endif %}
        let mut bindings = FilterBuilder::new({{ start_binding }});


        {% for field in fields | filter(attribute="filterable", value="exact") %}
            {% if field.base_rust_type == "bool" -%}
            if self.{{field.rust_name}}.is_some() {
                bindings.add_option("{{field.sql_name}}", &self.{{field.rust_name}}, BindingOperator::Eq);
            }
            {%- else -%}
            if !self.{{field.rust_name}}.is_empty() {
                bindings.add_vec("{{field.sql_name}}", &self.{{field.rust_name}});
            }
            {%- endif %}
        {% endfor %}
        {% for field in fields | filter(attribute="filterable", value="range") %}
            if self.{{field.rust_name}}_lte.is_some() {
                bindings.add_option("{{field.sql_name}}", &self.{{field.rust_name}}_lte, BindingOperator::Lte);
            }

            if self.{{field.rust_name}}_gte.is_some() {
                bindings.add_option("{{field.sql_name}}", &self.{{field.rust_name}}_gte, BindingOperator::Gte);
            }
        {% endfor %}

        let query = bindings.to_string();
        event!(Level::DEBUG, %query);
        query
    }

    fn bind_to_query<'a, T>(&'a self, mut query: QueryAs<'a, T>) -> QueryAs<'a, T> {
        {% if not pagination.disable %}
            const MAX_PER_PAGE: u32 = {{ pagination.max_per_page }};
            const DEFAULT_PER_PAGE: u32 = {{ pagination.default_per_page }};
            let per_page = self.per_page.unwrap_or(DEFAULT_PER_PAGE).min(MAX_PER_PAGE).max(1);
            let offset = self.page.unwrap_or(0) * per_page;
            event!(Level::DEBUG, per_page, offset);
            query = query.bind(per_page as i32).bind(offset as i32);
        {% endif %}



        {% for field in fields | filter(attribute="filterable", value="exact") %}
            {% if field.base_rust_type == "bool" -%}
            if self.{{field.rust_name}}.is_some() {
            {% else %}
            if !self.{{field.rust_name}}.is_empty() {
                {% endif %}
                event!(Level::DEBUG, {{field.rust_name}} = ?self.{{field.rust_name}});
                query = query.bind(&self.{{field.rust_name}});
            }
        {% endfor %}
        {% for field in fields | filter(attribute="filterable", value="range") %}
            {% set_global has_filterable = true %}
            if self.{{field.rust_name}}_lte.is_some() {
                event!(Level::DEBUG, {{field.rust_name}}_lte = ?self.{{field.rust_name}}_lte);
                query = query.bind(&self.{{field.rust_name}}_lte);
            }

            if self.{{field.rust_name}}_gte.is_some() {
                event!(Level::DEBUG, {{field.rust_name}}_gte = ?self.{{field.rust_name}}_gte);
                query = query.bind(&self.{{field.rust_name}}_gte);
            }
        {% endfor %}

        query
    }
}

#[instrument(skip(db))]
pub async fn list(
    db: impl ConnectionTrait,
    auth: &AuthInfo,
    filters: &ListQueryFilters) -> Result<Vec<{{ struct_base }}ListResult>, error_stack::Report<Error>> {

    let q = include_str!("list.sql");
    list_internal(q, db, auth, filters).await
}

{% if can_populate_list %}
#[instrument(skip(db))]
pub async fn list_populated(
    db: impl ConnectionTrait,
    auth: &AuthInfo,
    filters: &ListQueryFilters) -> Result<Vec<{{ struct_base }}PopulatedListResult>, error_stack::Report<Error>> {

    let q = include_str!("list_populated.sql");
    list_internal(q, db, auth, filters).await
}
{% endif %}

async fn list_internal<T>(
    query_template: &str,
    db: impl ConnectionTrait,
    auth: &AuthInfo,
    filters: &ListQueryFilters)
-> Result<Vec<T>, error_stack::Report<Error>>
where
    T: for<'r> sqlx::FromRow<'r, PgRow> + Send + Unpin,
{

    let (descending, order_by_field) = parse_order_by(filters.order_by.as_deref().unwrap_or("{{full_default_sort_field}}"))
        .change_context(Error::Filter)?;
    let order_direction = if descending { "DESC" } else { "ASC" };

    let q = query_template.replace("__insertion_point_order_by", &format!("{} {}", order_by_field.as_str(), order_direction));
    {% if has_filterable %}
        let q = q.replace("__insertion_point_filters", &filters.build_where_clause());
    {% endif %}
    let mut query = sqlx::query_as::<_, T>(q.as_str());

    let actor_ids = auth.actor_ids();
    event!(Level::DEBUG, organization_id=%auth.organization_id, actor_ids=?actor_ids);
    query = query
        {% if not global %}
        .bind(&auth.organization_id)
        {% endif %}
        .bind(&actor_ids);

    query = filters.bind_to_query(query);

    let results = query
        .fetch_all(db)
        .await
        .change_context(Error::Db)?;

    Ok(results)
}

/// Create a new {{struct_base}} in the database.
pub async fn create(db: &mut PgConnection, auth: &AuthInfo, payload: {{struct_base}}CreatePayload) -> Result<{{struct_base}}CreateResult, error_stack::Report<Error>> {
    // TODO create permissions auth check
    {% if allow_id_in_create %}
    let id = payload.id.unwrap_or_else({{id_type}}::new);
    {% else %}
    let id = {{id_type}}::new();
    {% endif %}
    create_raw(&mut *db, &id, &auth.organization_id, payload).await
}

/// Create a new {{struct_base}} in the database, allowing the ID to be explicitly specified
/// regardless of whether it would normally be allowed.
#[instrument(skip(db))]
pub async fn create_raw(
    db: &mut PgConnection,
    id: &{{id_type}},
    organization_id: &OrganizationId,
    payload: {{struct_base}}CreatePayload
) -> Result<{{struct_base}}CreateResult, error_stack::Report<Error>> {

    let result = query_file_as!({{struct_base}}, "{{dir}}/insert.sql",
        {{self::id_ref()}},
        {% if not global -%}
        {{self::db_org_id(base="organization_id")}},
        {%- endif %}
        {% for field in fields | filter(attribute="owner_write", value=true) %}
            {%- if field.nullable -%}
                {%- if field.is_custom_rust_type and field.base_type == "json" -%}
                sqlx::types::Json(payload.{{field.rust_name}}.as_ref()) as _,
                {%- else -%}
                payload.{{field.rust_name}}.as_ref(){% if field.is_custom_rust_type %} as _{% endif %},
                {%- endif -%}
            {%- else -%}
                {%- if field.is_custom_rust_type and field.base_type == "json" -%}
                sqlx::types::Json(&payload.{{field.rust_name}}) as _,
                {%- else -%}
                &payload.{{field.rust_name}}{% if field.is_custom_rust_type %} as _{% endif %},
                {%- endif -%}
            {%- endif -%}
        {% endfor %}
        )
        .fetch_one(&mut *db)
    {% if belongs_to_field %}
        .await;

    let result = check_missing_parent_error(result)?;

    {% else %}
        .await
        .change_context(Error::Db)?;
    {% endif %}

    {% if create_payload_fields %}
    let child_result = create_payload_children(&mut *db, id, organization_id, payload).await?;

    let result = {{struct_base}}CreateResult {
        {% for f in fields | filter(attribute="never_read", value=false) -%}
        {{f.rust_name}}: result.{{f.rust_name}},
        {%- endfor -%}
        {% for c in children | filter(attribute="write_payload_field_name") -%}
        {{c.write_payload_field_name}}: child_result.{{c.write_payload_field_name}},
        {%- endfor %}
        _permission: result._permission,
    };
    {% endif %}

    Ok(result)
}

{% if create_payload_fields %}

#[derive(Default)]
struct {{struct_base}}CreatePayloadChildrenResult {
    {%- for c in children | filter(attribute="write_payload_field_name") -%}
    {%- if c.relationship.many %}
    {{c.write_payload_field_name}}: Vec<{{c.struct_base}}>,
    {% else %}
    {{c.write_payload_field_name}}: Option<{{c.struct_base}}>,
    {%- endif -%}
    {%- endfor -%}
}

async fn create_payload_children(
    db: &mut PgConnection,
    parent_id: &{{id_type}},
    organization_id: &OrganizationId,
    payload: {{struct_base}}CreatePayload
) -> Result<{{struct_base}}CreatePayloadChildrenResult, error_stack::Report<Error>> {

    {% for c in children | filter(attribute="write_payload_field_name") %}
        let {{c.write_payload_field_name}}_result = if let Some(mut children) = payload.{{c.write_payload_field_name}} {

        {% if c.relationship.many %}
            if !children.is_empty() {
                for child in children.iter_mut() {
                    child.id = Some({{c.object_id}}::new());
                    child.{{c.parent_field}} = parent_id.clone();
                }

                crate::models::{{c.module}}::queries::update_all_with_parent(&mut *db, organization_id, true, parent_id, &children).await?
            } else {
                vec![]
            }
        {% else %}
            tracing::event!(Level::DEBUG, ?children, "Creating child {{c.module}}");
            children.id = Some({{c.object_id}}::new());
            children.{{c.parent_field}} = parent_id.clone();
            let result = crate::models::{{c.module}}::queries::upsert_with_parent(&mut *db, organization_id, true, parent_id, &children).await?;
            Some(result)
        {% endif %}
        } else {
            {% if c.relationship.many %}
            vec![]
            {% else %}
            None
            {% endif %}
        };
    {% endfor %}

    let result = {{struct_base}}CreatePayloadChildrenResult {
        {% for c in children | filter(attribute="write_payload_field_name") -%}
        {{c.write_payload_field_name}}: {{c.write_payload_field_name}}_result,
        {%- endfor %}
    };

    Ok(result)
}
{% endif %}

#[instrument(skip(db))]
pub async fn update(
    db: &mut PgConnection,
    auth: &AuthInfo,
    id: &{{id_type}},
    payload: {{ struct_base }}UpdatePayload)
-> Result<bool, error_stack::Report<Error>> {
    let actor_ids = auth.actor_ids();
    let result = query_file_scalar!("{{dir}}/update.sql",
        {{self::id_ref()}},
        {{self::db_org_id()}},
        &actor_ids,
        {% for field in fields | filter(attribute="owner_write", value=true) %}
            {%- if field.nullable -%}
                {%- if field.is_custom_rust_type and field.base_type == "json" -%}
                sqlx::types::Json(payload.{{field.rust_name}}.as_ref()) as _,
                {%- else -%}
                payload.{{field.rust_name}}.as_ref() as _,
                {%- endif -%}
            {%- else -%}
                {%- if field.is_custom_rust_type and field.base_type == "json" -%}
                sqlx::types::Json(&payload.{{field.rust_name}}) as _,
                {%- else -%}
                &payload.{{field.rust_name}} as _,
                {%- endif -%}
            {%- endif -%}
        {% endfor %}
        )
        .fetch_optional(&mut *db)
        .await
        .change_context(Error::Db)?;

    let Some(is_owner) = result else {
        return Ok(false);
    };

    {% if update_payload_fields %}
    update_payload_children(&mut *db, &auth.organization_id, id, is_owner, payload).await?;
    {% endif %}

    Ok(true)
}

{% if update_payload_fields %}
{# TODO make this fill in a result payload and return it #}
async fn update_payload_children(
    db: &mut PgConnection,
    organization_id: &OrganizationId,
    parent_id: &{{id_type}},
    is_owner: bool,
    payload: {{struct_base}}UpdatePayload
) -> Result<(), error_stack::Report<Error>> {
    {% for c in children | filter(attribute="write_payload_field_name") %}
    if let Some(mut children) = payload.{{c.write_payload_field_name}} {
        {% if c.relationship.many %}
        for child in children.iter_mut() {
            child.{{c.parent_field}} = parent_id.clone();
        }
        {% else %}
        children.{{c.parent_field}} = parent_id.clone();
        {% endif %}

        crate::models::{{c.module}}::queries::update_all_with_parent(
            &mut *db,
            organization_id,
            is_owner,
            parent_id,
            &children).await?;
    }
    {% endfor %}

    Ok(())
}
{% endif %}

#[instrument(skip(db))]
pub async fn delete(db: impl ConnectionTrait, auth: &AuthInfo, id: &{{id_type}}) -> Result<bool, error_stack::Report<Error>> {
    let actor_ids = auth.actor_ids();
    let result = query_file!("{{dir}}/delete.sql",
        {{self::id_ref()}},
        {{self::db_org_id()}},
        &actor_ids
        )
        .execute(db)
        .await
        .change_context(Error::Db)?;
    Ok(result.rows_affected() > 0)
}

#[instrument(skip(db))]
pub async fn lookup_object_permissions(
    db: impl ConnectionTrait,
    auth: &AuthInfo,
    #[allow(unused_variables)]
    id: &{{id_type}},
) -> Result<Option<ObjectPermission>, error_stack::Report<Error>> {
    let actor_ids = auth.actor_ids();
    let result = query_file_scalar!(
        "{{dir}}/lookup_object_permissions.sql",
        {{self::db_org_id()}},
        &actor_ids,
        {% if auth_scope == "object" %}
        {{self::id_ref()}},
        {% endif %}
        )
        .fetch_one(db)
        .await
        .change_context(Error::Db)?;

    let perm = result.and_then(|r| ObjectPermission::from_str_infallible(&r));
    Ok(perm)
}

{% if belongs_to_field %}
{% if belongs_to_field.unique %}
/// Update or insert the child of the given parent. Since there can only be a single child per
/// parent, this ignores the `id` field of the payload, and only looks at the parent ID.
{% else %}
/// Update or insert a child of the given parent.
{% endif %}
#[instrument(skip(db))]
pub async fn upsert_with_parent(
    db: impl ConnectionTrait,
    organization_id: &OrganizationId,
    is_owner: bool,
    parent_id: &{{belongs_to_field.rust_type}},
    payload: &{{ struct_base }}UpdatePayload)
    -> Result<{{struct_base}}, error_stack::Report<Error>> {

    let id = payload.id.clone().unwrap_or_else({{id_type}}::new);
    let result = query_file_as!({{struct_base}}, "{{dir}}/upsert_single_child.sql",
        {% if owner_and_user_different_access %}
        is_owner,
        {% endif %}
        {{self::id_ref()}},
        {% if not global -%}
        {{self::db_org_id(base="organization_id")}},
        {%- endif %}
        {% for field in fields | filter(attribute="owner_write", value=true) %}
            {%- if field.nullable -%}
                payload.{{field.rust_name}}.as_ref(){% if field.is_custom_rust_type %} as _{% endif %},
            {%- else -%}
                &payload.{{field.rust_name}}{% if field.is_custom_rust_type %} as _{% endif %},
            {%- endif -%}
        {% endfor %}
        )
        .fetch_one(db)
        .await;
    check_missing_parent_error(result)
}

{% if not belongs_to_field.unique %}
/// Update a single child of the given parent. This does nothing if the child doesn't exist.
#[instrument(skip(db))]
pub async fn update_one_with_parent(
    db: impl ConnectionTrait,
    auth: &AuthInfo,
    is_owner: bool,
    parent_id: &{{belongs_to_field.rust_type}},
    id: &{{id_type}},
    mut payload: {{ struct_base }}UpdatePayload
    ) -> Result<bool, error_stack::Report<Error>> {

    payload.{{belongs_to_field.name}} = parent_id.clone();

    let actor_ids = auth.actor_ids();
    let result = query_file!("{{dir}}/update_one_with_parent.sql",
        {{self::id_ref()}},
        parent_id.as_uuid(),
        {{self::db_org_id()}},
        &actor_ids,
        {% for field in fields | filter(attribute="owner_write_non_parent", value=true) %}
            {%- if field.nullable -%}
                payload.{{field.rust_name}}.as_ref(){% if field.is_custom_rust_type %} as _{% endif %},
            {%- else -%}
                &payload.{{field.rust_name}} as _,
            {%- endif -%}
        {% endfor %}
        )
        .execute(db)
        .await
        .change_context(Error::Db)?;

    Ok(result.rows_affected() > 0)
}

/// Update the children of the given parent.
/// Insert new values that are not yet in the database and
/// delete existing values that are not in the payload.
#[instrument(skip(db))]
pub async fn update_all_with_parent(
    db: &mut PgConnection,
    organization_id: &OrganizationId,
    is_owner: bool,
    parent_id: &{{belongs_to_field.rust_type}},
    payload: &[{{ struct_base }}UpdatePayload])
    -> Result<Vec<{{struct_base}}>, error_stack::Report<Error>> {

    if payload.is_empty() {
        delete_all_children_of_parent(db, organization_id, parent_id).await?;
        Ok(Vec::new())
    } else {
        // First, we upsert the existing children.
        let q = include_str!("upsert_children.sql");
        let bindings = ValuesBuilder{
            first_parameter: 4,
            num_values: payload.len(),
            num_columns: 2 + {{ fields | filter(attribute="owner_write", value=true) | length }},
        };
        let q = q.replace("__insertion_point_insert_values", &bindings.to_string());

        let mut query = sqlx::query_as::<_, {{struct_base}}>(q.as_str());

        query = query
            .bind(is_owner)
            {%if not global %}
            .bind(organization_id)
            {%endif %}
            .bind(parent_id.as_uuid());

        for p in payload {
            let id = p.id.unwrap_or_else(|| {{id_type}}::new());
            query = query
                .bind(id)
                .bind(organization_id)
                {% for field in fields | filter(attribute="owner_write", value=true) %}
                .bind(
                {%- if field.nullable -%}
                    p.{{field.rust_name}}.as_ref(),
                {%- else -%}
                    &p.{{field.rust_name}},
                {%- endif -%}
                )
                {% endfor %}
        }

        let results = query
            .fetch_all(&mut *db)
            .await;
        let results = check_missing_parent_error(results)?;

        // Delete any of the children that were not sent in.
        let ids = results.iter().map(|o| o.{{self::id_ref()}}.clone()).collect::<Vec<_>>();
        query_file!("{{dir}}/delete_removed_children.sql",
            {%if not global %}
            {{self::db_org_id(base="organization_id")}},
            {% endif %}
            parent_id.as_uuid(),
            &ids
            )
            .execute(db)
            .await
            .change_context(Error::Db)?;

        Ok(results)
    }
}
{% endif %}

/// Delete a child object, making sure that its parent ID matches.
#[instrument(skip(db))]
pub async fn delete_with_parent(
    db: impl ConnectionTrait,
    auth: &AuthInfo,
    parent_id: &{{belongs_to_field.rust_type}},
    child_id: &{{id_type}})
    -> Result<bool, error_stack::Report<Error>> {

    let result = query_file!("{{dir}}/delete_with_parent.sql",
        {%if not global %}
        {{self::db_org_id()}},
        {% endif %}
        parent_id.as_uuid(),
        {{self::id_ref(id="child_id")}},
        )
        .execute(db)
        .await
        .change_context(Error::Db)?;
    Ok(result.rows_affected() > 0)
}

/// Delete all children of the given parent. This function does not do permissions checks.
#[instrument(skip(db))]
pub async fn delete_all_children_of_parent(
    db: impl PgExecutor<'_>,
    organization_id: &OrganizationId,
    parent_id: &{{belongs_to_field.rust_type}})
    -> Result<bool, error_stack::Report<Error>> {

    let result = query_file!("{{dir}}/delete_all_children.sql",
        {%if not global %}
        {{self::db_org_id(base="organization_id")}},
        {% endif %}
        parent_id.as_uuid()
        )
        .execute(db)
        .await
        .change_context(Error::Db)?;
    Ok(result.rows_affected() > 0)
}

{% endif %}
*/
