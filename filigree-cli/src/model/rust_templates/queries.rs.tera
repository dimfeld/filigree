use error_stack::ResultExt;
use filigree::{
    errors::OrderByError,
    sql::{BindingOperator, FilterBuilder}
};
use serde::Deserialize;
use sqlx::{PgExecutor, query_file, query_file_as};
use tracing::{event, Level};

use std::str::FromStr;

use super::{{id_type}};
{% if model_name != "Organization" %}
use crate::models::organization::OrganizationId;
{% endif %}
use super::types::*;

use crate::auth::AuthInfo;
use crate::Error;

type QueryAs<'q, T> = sqlx::query::QueryAs<'q, sqlx::Postgres, T, <sqlx::Postgres as sqlx::database::HasArguments<'q>>::Arguments>;

/// Get a {{model_name}} from the database
pub async fn get(db: impl PgExecutor<'_>, auth: &AuthInfo, id: {{id_type}}) -> Result<{{ struct_base }}, error_stack::Report<Error>> {
    let actor_ids = auth.actor_ids();
    let object = query_file_as!({{struct_base}}, "{{dir}}/select_one.sql",
        id.as_uuid(),
        auth.organization_id.as_uuid(),
        &actor_ids
        )
        .fetch_optional(db)
        .await
        .change_context(Error::Db)?
        .ok_or(Error::NotFound("{{model_name}}"))?;

    Ok(object)
}

{% if can_populate_get %}
/// Get a populated {{model_name}} from the database
pub async fn get(db: impl PgExecutor<'_>, auth: &AuthInfo, id: {{id_type}}) -> Result<{{ struct_base }}PopulatedGet, error_stack::Report<Error>> {
    let actor_ids = auth.actor_ids();
    let object = query_file_as!({{struct_base}}PopulatedGet, "{{dir}}/select_one_populated.sql",
        id.as_uuid(),
        auth.organization_id.as_uuid(),
        &actor_ids
        )
        .fetch_optional(db)
        .await
        .change_context(Error::Db)?
        .ok_or(Error::NotFound("{{model_name}}"))?;

    Ok(object)
}
{% endif %}

#[derive(Debug, Default)]
enum OrderByField {
    {%- for field in fields  %}
    {%- if field.sortable != "none" -%}
        {% if field.snake_case_name == default_sort_field -%}
        #[default]
        {%- endif %}
    {{field.pascal_case_name}},
    {%- endif -%}
    {%- endfor -%}
}

impl OrderByField {
    fn as_str(&self) -> &str {
        match self {
            {% for field in fields -%}
            {%- if field.sortable != "none" -%}
            Self::{{field.pascal_case_name}} => "{{field.snake_case_name}}",
            {%- endif -%}
            {%- endfor %}
        }
    }

    fn allowed_direction(&self, descending: bool) -> bool {
        match self {
            {% for field in fields | filter(attribute="sortable", value="ascending_only") -%}
            Self::{{field.pascal_case_name}} => descending == false,
            {%- endfor %}
            {% for field in fields | filter(attribute="sortable", value="descending_only") -%}
            Self::{{field.pascal_case_name}} => descending == true,
            {%- endfor %}
            _ => true
        }
    }
}

impl std::str::FromStr for OrderByField {
    type Err = OrderByError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let value = match s {
            {% for field in fields -%}
            {%- if field.sortable != "none" -%}
            "{{field.sql_name}}" => OrderByField::{{field.pascal_case_name}},
            {%- endif -%}
            {%- endfor %}
            _ => return Err(OrderByError::InvalidField),
        };

        Ok(value)
    }
}

fn parse_order_by(field: &str) -> Result<(bool, OrderByField), OrderByError> {
    let descending = field.starts_with('-');
    let field = if descending {
        &field[1..]
    } else {
        field
    };

    let value = OrderByField::from_str(field)?;
    if !value.allowed_direction(descending) {
        return Err(OrderByError::InvalidDirection);
    }
    Ok((descending, value))
}

{% set_global has_filterable = false %}

#[derive(Deserialize, Debug)]
pub struct ListQueryFilters {
    {%if not pagination.disable %}
    pub page: Option<u32>,
    pub per_page: Option<u32>,
    {% endif %}
    pub order_by: Option<String>,

    {%- for field in fields | filter(attribute="filterable", value="exact") -%}
        {% set_global has_filterable = true %}
    #[serde(default)]
    pub {{field.rust_name}}: Vec<{{field.base_rust_type}}>,
    {%- endfor -%}
    {%- for field in fields | filter(attribute="filterable", value="range") -%}
        {% set_global has_filterable = true %}
    pub {{field.rust_name}}_lte: Option<{{field.base_rust_type}}>,
    pub {{field.rust_name}}_gte: Option<{{field.base_rust_type}}>,
    {%- endfor -%}
}

impl ListQueryFilters {
    fn build_where_clause(&self) -> String {
        {% set start_binding = 3 %}
        {% if not pagination.disable %}
          {% set start_binding = start_binding + 2 %}
        {% endif %}
        let mut bindings = FilterBuilder::new({{ start_binding }});


        {% for field in fields | filter(attribute="filterable", value="exact") %}
            if !self.{{field.rust_name}}.is_empty() {
                bindings.add_vec("{{field.sql_name}}", &self.{{field.rust_name}});
            }
        {% endfor %}
        {% for field in fields | filter(attribute="filterable", value="range") %}
            if self.{{field.rust_name}}_lte.is_some() {
                bindings.add_option("{{field.sql_name}}", &self.{{field.rust_name}}_lte, BindingOperator::Lte);
            }

            if self.{{field.rust_name}}_gte.is_some() {
                bindings.add_option("{{field.sql_name}}", &self.{{field.rust_name}}_gte, BindingOperator::Gte);
            }
        {% endfor %}

        let query = bindings.to_string();
        event!(Level::DEBUG, %query);
        query
    }

    fn bind_to_query<'a, T>(&'a self, mut query: QueryAs<'a, T>) -> QueryAs<'a, T> {
        {% if not pagination.disable %}
            const MAX_PER_PAGE: u32 = {{ pagination.max_per_page }};
            const DEFAULT_PER_PAGE: u32 = {{ pagination.default_per_page }};
            let per_page = self.per_page.unwrap_or(DEFAULT_PER_PAGE).min(MAX_PER_PAGE).max(1);
            let offset = self.page.unwrap_or(0) * per_page;
            event!(Level::DEBUG, %per_page, %offset);
            query = query.bind(per_page as i32).bind(offset as i32);
        {% endif %}



        {% for field in fields | filter(attribute="filterable", value="exact") %}
            if !self.{{field.rust_name}}.is_empty() {
                event!(Level::DEBUG, {{field.rust_name}} = ?self.{{field.rust_name}});
                query = query.bind(&self.{{field.rust_name}});
            }
        {% endfor %}
        {% for field in fields | filter(attribute="filterable", value="range") %}
            {% set_global has_filterable = true %}
            if self.{{field.rust_name}}_lte.is_some() {
                event!(Level::DEBUG, {{field.rust_name}}_lte = ?self.{{field.rust_name}}_lte);
                query = query.bind(&self.{{field.rust_name}}_lte);
            }

            if self.{{field.rust_name}}_gte.is_some() {
                event!(Level::DEBUG, {{field.rust_name}}_gte = ?self.{{field.rust_name}}_gte);
                query = query.bind(&self.{{field.rust_name}}_gte);
            }
        {% endfor %}

        query
    }
}

pub async fn list(db: impl PgExecutor<'_>, auth: &AuthInfo, filters: &ListQueryFilters) -> Result<Vec<{{ struct_base }}>, error_stack::Report<Error>> {
    let q = include_str!("list.sql");
    list_internal(q, db, auth, filters).await
}

{% if can_populate_list %}
pub async fn list_populated(db: impl PgExecutor<'_>, auth: &AuthInfo, filters: &ListQueryFilters) -> Result<Vec<{{ struct_base }}PopulatedGet>, error_stack::Report<Error>> {
    let q = include_str!("list_populated.sql");
    list_internal(q, db, auth, filters).await
}
{% endif %}

async fn list_internal<T: sqlx::FromRow>(query_template: &str, db: impl PgExecutor<'_>, auth: &AuthInfo, filters: &ListQueryFilters) -> Result<Vec<T>>>, error_stack::Report<Error>> {
    let (descending, order_by_field) = parse_order_by(filters.order_by.as_deref().unwrap_or("{{full_default_sort_field}}"))
        .change_context(Error::Filter)?;
    let order_direction = if descending { "DESC" } else { "ASC" };

    let q = q.replace("__insertion_point_order_by", &format!("{} {}", order_by_field.as_str(), order_direction));
    {% if has_filterable %}
        let q = q.replace("__insertion_point_filters", &filters.build_where_clause());
    {% endif %}
    let mut query = sqlx::query_as::<_, T>(q.as_str());

    let actor_ids = auth.actor_ids();
    event!(Level::DEBUG, organization_id=?auth.organization_id, actor_ids=?actor_ids);
    query = query.bind(&auth.organization_id)
        .bind(&actor_ids);

    query = filters.bind_to_query(query);

    let results = query
        .fetch_all(db)
        .await
        .change_context(Error::Db)?;

    Ok(results)
}

pub async fn create(db: impl PgExecutor<'_>, auth: &AuthInfo, payload: &{{struct_base}}CreatePayload) -> Result<{{struct_base}}, error_stack::Report<Error>> {
    // TODO create permissions auth check
    let id = {{id_type}}::new();
    create_raw(db, id, auth.organization_id, payload).await
}

/// Create a new {{struct_base}} in the database, allowing the ID to be explicitly specified.
pub async fn create_raw(
    db: impl PgExecutor<'_>,
    id: {{id_type}},
    organization_id: OrganizationId,
    payload: &{{struct_base}}CreatePayload) -> Result<{{struct_base}}, error_stack::Report<Error>> {

    let result = query_file_as!({{struct_base}}, "{{dir}}/insert.sql",
        id.as_uuid(),
        {% if not global -%}
        organization_id.as_uuid(),
        {%- endif %}
        {% for field in fields | filter(attribute="owner_write", value=true) %}
            {%- if field.nullable -%}
                payload.{{field.rust_name}}.as_ref(){% if field.is_custom_rust_type %} as _{% endif %},
            {%- else -%}
                &payload.{{field.rust_name}}{% if field.is_custom_rust_type %} as _{% endif %},
            {%- endif -%}
        {% endfor %}
        )
        .fetch_one(db)
        .await
        .change_context(Error::Db)?;

    Ok(result)
}

pub async fn update(db: impl PgExecutor<'_>, auth: &AuthInfo, id: {{id_type}}, payload: &{{ struct_base }}UpdatePayload) -> Result<bool, error_stack::Report<Error>> {
    let actor_ids = auth.actor_ids();
    let result = query_file!("{{dir}}/update.sql",
        id.as_uuid(),
        auth.organization_id.as_uuid(),
        &actor_ids,
        {% for field in fields | filter(attribute="owner_write", value=true) %}
            {%- if field.nullable -%}
                payload.{{field.rust_name}}.as_ref(){% if field.is_custom_rust_type %} as _{% endif %},
            {%- else -%}
                &payload.{{field.rust_name}} as _,
            {%- endif -%}
        {% endfor %}
        )
        .execute(db)
        .await
        .change_context(Error::Db)?;
    Ok(result.rows_affected() > 0)
}

pub async fn delete(db: impl PgExecutor<'_>, auth: &AuthInfo, id: {{id_type}}) -> Result<bool, error_stack::Report<Error>> {
    let actor_ids = auth.actor_ids();
    let result = query_file!("{{dir}}/delete.sql",
        id.as_uuid(),
        auth.organization_id.as_uuid(),
        &actor_ids
        )
        .execute(db)
        .await
        .change_context(Error::Db)?;
    Ok(result.rows_affected() > 0)
}

{% if belongs_to_field %}
{% if belongs_to_field.unique %}
/// Update the child of the given parent.
pub async fn update_with_parent(
    db: &mut PgConnection,
    auth: &AuthInfo,
    is_owner: bool,
    parent_id: {{belongs_to_field.rust_type}},
    payload: &Option<{{ struct_base }}UpdatePayload>)
    -> Result<Option<{{struct_base}}>, error_stack::Report<Error>> {

    if let Some(payload) = payload.as_ref() {
        let result = query_file_as!({{struct_base}}, "{{dir}}/upsert_single_child.sql",
            is_owner,
            {{id_type}}::new() as _,
            {% if not global -%}
            organization_id.as_uuid(),
            {%- endif %}
            {% for field in fields | filter(attribute="owner_write", value=true) %}
                {%- if field.nullable -%}
                    payload.{{field.rust_name}}.as_ref(){% if field.is_custom_rust_type %} as _{% endif %},
                {%- else -%}
                    &payload.{{field.rust_name}}{% if field.is_custom_rust_type %} as _{% endif %},
                {%- endif -%}
            {% endfor %}
            )
            .fetch_one(db)
            .await
            .change_context(Error::Db)?;
        Ok(Some(result))
    } else {
        delete_all_children_of_parent(db, auth, parent_id).await?;
        Ok(None)
    }
}
{% else %}
pub async fn update_one_with_parent(
    db: &mut PgConnection,
    auth: &AuthInfo,
    is_owner: bool,
    id: {{id_type}},
    parent_id: {{belongs_to_field.rust_type}},
    payload: &{{ struct_base }}UpdatePayload
    ) -> Result<Option<{{struct_base}}>, error_stack::Report<Error>> {

    payload.{{c.parent_field}} = Some(parent_id);

    let actor_ids = auth.actor_ids();
    let result = query_file!("{{dir}}/update_one_with_parent.sql",
        id.as_uuid(),
        parent_id.as_uuid(),
        auth.organization_id.as_uuid(),
        &actor_ids,
        {% for field in fields | filter(attribute="owner_write_non_parent", value=true) %}
            {%- if field.nullable -%}
                payload.{{field.rust_name}}.as_ref(){% if field.is_custom_rust_type %} as _{% endif %},
            {%- else -%}
                &payload.{{field.rust_name}} as _,
            {%- endif -%}
        {% endfor %}
        )
        .execute(db)
        .await
        .change_context(Error::Db)?;
    Ok(result.rows_affected() > 0)

}

/// Update the children of the given parent.
pub async fn update_with_parent(db: &mut PgConnection,
    auth: &AuthInfo,
    is_owner: bool,
    parent_id: {{belongs_to_field.rust_type}},
    payload: &[{{ struct_base }}UpdatePayload])
    -> Result<Vec<{{struct_base}}UpdatePayload>, error_stack::Report<Error>> {

    if payload.is_empty() {
        delete_all_children_of_parent(db, auth, parent_id).await?;
        Ok(Vec::new())
    } else {
        // First, we upsert the existing children.
        let q = include_str!("upsert_children.sql");
        let bindings = ValuesBuilder{
            first_parameter: 4,
            num_values: payload.len(),
            num_columns: 2 + {{ fields | filter(attribute="owner_write", value=true) | length }},
        };
        let q = q.replace("__insertion_point_insert_values", bindings.to_string());

        let mut query = sqlx::query_as::<_, {{struct_base}}>(q.as_str());

        query = query
            .bind(is_owner)
            {%if not global %}
            .bind(auth.organization_id.as_uuid())
            {%endif %}
            .bind(parent_id.as_uuid());

        for p in payload {
            let id = p.id.unwrap_or_else(|| {{id_type}}::new());
            query = query
                .bind(id.as_uuid())
                .bind(auth.organization_id.as_uuid())
                {% for field in fields | filter(attribute="owner_write", value=true) %}
                .bind(
                {%- if field.nullable -%}
                    payload.{{field.rust_name}}.as_ref(){% if field.is_custom_rust_type %} as _{% endif %},
                {%- else -%}
                    &payload.{{field.rust_name}}{% if field.is_custom_rust_type %} as _{% endif %},
                {%- endif -%}
                )
                {% endfor %}
        }

        let results = query
            .fetch_all(db)
            .await
            .change_context(Error::Db)?;

        // Delete any of the children that were not sent in.
        let ids = payload.iter().map(|o| o.id.as_uuid()).collect::<Vec<_>>();
        query_file!("{{dir}}/delete_removed_children.sql",
            {%if not global %}
            auth.organization_id.as_uuid(),
            {% endif %}
            &parent_id,
            &ids
            )
            .execute(db)
            .await
            .change_context(Error::Db)?;

        Ok(results)
    }
}

pub async fn delete_with_parent(
    db: impl PgExecutor<'_>,
    auth: &AuthInfo,
    parent_id: {{belongs_to_field.rust_type}})
    child_id: {{id_type}})
) -> Result<(), error_stack::Report<Error>> {
    query_file!("{{dir}}/delete_with_parent.sql",
        {%if not global %}
        auth.organization_id.as_uuid(),
        {% endif %}
        &parent_id,
        &child_id
        )
        .execute(db)
        .await
        .change_context(Error::Db)?;
    Ok(())
}
{% endif %}

/// Delete all children of the given parent. This function does not do permissions checks.
pub async fn delete_all_children_of_parent(
    db: impl PgExecutor<'_>,
    auth: &AuthInfo,
    parent_id: {{belongs_to_field.rust_type}})
    -> Result<(), error_stack::Report<Error>> {

    query_file!("{{dir}}/delete_all_children.sql",
        {%if not global %}
        auth.organization_id.as_uuid(),
        {% endif %}
        &parent_id
        )
        .execute(db)
        .await
        .change_context(Error::Db)?;
    Ok(())
}

{% endif %}

